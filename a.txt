package br.com.luiz.smktsystem.view.dialog;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.math.BigDecimal;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;

import br.com.luiz.smktsystem.app.enums.Category;
import br.com.luiz.smktsystem.service.ProductService;
import br.com.luiz.smktsystem.service.dto.ProductRegisterDTO;

public class ImportProductsDialog extends JFrame {

    private ProductService service;

    public ImportProductsDialog(ProductService service) {
        this.service = service;
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        pack();
        setLocationRelativeTo(null);
        setSize(600, 400);

        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 10, 10);

        JButton importButton = new JButton("Importar Produtos");
        importButton.setFont(new Font("Arial", Font.PLAIN, 18));
        importButton.addActionListener(e -> importProducts());
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(importButton, gbc);
    }

    private void importProducts() {
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try {
                PDDocument document = PDDocument.load(selectedFile);
                PDFTextStripper pdfStripper = new PDFTextStripper();
                String text = pdfStripper.getText(document);
                String[] lines = text.split("\n");
                for (int i = 3; i < lines.length - 1; i++) {
                    String line = lines[i].trim();
                    if (line.startsWith("---")) {
                        continue;
                    }
                    String[] firstSplit = line.split("R\\$");
                    if (firstSplit.length != 2) {
                        System.err.println("Skipping line " + i
                                + " because it does not contain a valid product and price: " + line);
                        continue;
                    }
                    String name = firstSplit[0].trim();
                    String[] secondSplit = firstSplit[1].trim().split("\\s+", 2);
                    if (secondSplit.length != 2) {
                        System.err.println("Skipping line " + i
                                + " because it does not contain a valid price and quantity: " + line);
                        continue;
                    }
                    String priceStr = secondSplit[0].trim();
                    String[] thirdSplit = secondSplit[1].trim().split("\\s+", 2);
                    if (thirdSplit.length != 2) {
                        System.err.println("Skipping line " + i
                                + " because it does not contain a valid quantity and category: " + line);
                        continue;
                    }
                    String categoryStr = thirdSplit[0];
                    String quantityStr = thirdSplit[1];
                    try {
                        BigDecimal price = new BigDecimal(priceStr);
                        int quantity = Integer.parseInt(quantityStr);
                        Category category = mapToCategory(categoryStr);
                        ProductRegisterDTO product = new ProductRegisterDTO(name, price, quantity, category);
                        service.registerProduct(product);
                    } catch (NumberFormatException ex) {
                        System.err
                                .println("Skipping line " + i + " because the price or quantity is not a valid number: "
                                        + priceStr + ", " + quantityStr);
                        continue;
                    }

                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private Category mapToCategory(String description) {
        switch (description) {
            case "Alimento":
                return Category.FOOD;
            case "Limpeza":
                return Category.CLEANING;
            case "EscritÃ³rio":
                return Category.OFFICE;
            default:
                throw new IllegalArgumentException("Invalid category: " + description);
        }
    }
}